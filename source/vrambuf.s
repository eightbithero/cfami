;
; File generated by cc65 v 2.18 - N/A
;
	.fopt		compiler,"cc65 v 2.18 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.import		_ppu_wait_frame
	.export		_updptr
	.export		_vrambuf_end
	.export		_vrambuf_clear
	.export		_vrambuf_flush
	.export		_vrambuf_put
	.import		_memcpy

.segment	"DATA"

_updptr:
	.byte	$00

; ---------------------------------------------------------------
; void __near__ vrambuf_end (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_vrambuf_end: near

.segment	"CODE"

;
; VRAMBUF_SET(NT_UPD_EOF);
;
	ldy     _updptr
	lda     #$FF
	sta     $0500,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ vrambuf_clear (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_vrambuf_clear: near

.segment	"CODE"

;
; updptr = 0;
;
	lda     #$00
	sta     _updptr
;
; vrambuf_end();
;
	jmp     _vrambuf_end

.endproc

; ---------------------------------------------------------------
; void __near__ vrambuf_flush (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_vrambuf_flush: near

.segment	"CODE"

;
; vrambuf_end();
;
	jsr     _vrambuf_end
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; vrambuf_clear();
;
	jmp     _vrambuf_clear

.endproc

; ---------------------------------------------------------------
; void __near__ vrambuf_put (unsigned short, __near__ const unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_vrambuf_put: near

.segment	"CODE"

;
; void vrambuf_put(word addr, register const char* str, byte len) {
;
	jsr     pusha
;
; if (VBUFSIZE-4-len < updptr) {
;
	lda     #$38
	sec
	ldy     #$00
	sbc     (sp),y
	cmp     _updptr
	bcs     L0013
;
; vrambuf_flush();
;
	jsr     _vrambuf_flush
;
; VRAMBUF_ADD((addr >> 8) ^ NT_UPD_HORZ);
;
L0013:	ldx     #$05
	lda     #$00
	clc
	adc     _updptr
	bcc     L0019
	inx
L0019:	sta     ptr1
	stx     ptr1+1
	ldy     #$04
	lda     (sp),y
	eor     #$40
	ldy     #$00
	sta     (ptr1),y
	inc     _updptr
;
; VRAMBUF_ADD(addr); // only lower 8 bits
;
	ldy     #$03
	lda     (sp),y
	ldy     _updptr
	sta     $0500,y
	inc     _updptr
;
; VRAMBUF_ADD(len);
;
	ldy     #$00
	lda     (sp),y
	ldy     _updptr
	sta     $0500,y
	inc     _updptr
;
; memcpy(updbuf+updptr, str, len);
;
	lda     _updptr
	pha
	lda     #$00
	clc
	adc     #$05
	tax
	pla
	jsr     pushax
	ldy     #$06
	jsr     pushwysp
	ldy     #$04
	lda     (sp),y
	ldx     #$00
	jsr     _memcpy
;
; updptr += len;
;
	ldy     #$00
	lda     (sp),y
	clc
	adc     _updptr
	sta     _updptr
;
; vrambuf_end();
;
	jsr     _vrambuf_end
;
; }
;
	jmp     incsp5

.endproc

