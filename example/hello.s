;
; File generated by cc65 v 2.18 - N/A
;
	.fopt		compiler,"cc65 v 2.18 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "hello.c", 1613, 1704640239
	.dbg		file, "neslib.h", 11310, 1704639340
	.dbg		file, "/opt/homebrew/Cellar/cc65/2.19/share/cc65/include/string.h", 5104, 1590865395
	.dbg		file, "/opt/homebrew/Cellar/cc65/2.19/share/cc65/include/stddef.h", 3057, 1590865395
	.dbg		file, "/opt/homebrew/Cellar/cc65/2.19/share/cc65/include/stdio.h", 6189, 1590865395
	.dbg		file, "/opt/homebrew/Cellar/cc65/2.19/share/cc65/include/stdarg.h", 2913, 1590865395
	.dbg		file, "vrambuf.h", 1133, 1704644197
	.forceimport	__STARTUP__
	.dbg		sym, "pal_col", "00", extern, "_pal_col"
	.dbg		sym, "ppu_on_all", "00", extern, "_ppu_on_all"
	.dbg		sym, "scroll", "00", extern, "_scroll"
	.dbg		sym, "set_vram_update", "00", extern, "_set_vram_update"
	.dbg		sym, "memset", "00", extern, "_memset"
	.dbg		sym, "sprintf", "00", extern, "_sprintf"
	.dbg		sym, "vrambuf_clear", "00", extern, "_vrambuf_clear"
	.dbg		sym, "vrambuf_put", "00", extern, "_vrambuf_put"
	.import		_pal_col
	.import		_ppu_on_all
	.import		_scroll
	.import		_set_vram_update
	.import		_memset
	.import		_sprintf
	.import		_vrambuf_clear
	.import		_vrambuf_put
	.export		_scroll_demo
	.export		_main

.segment	"RODATA"

L0012:
	.byte	$25,$36,$78,$20,$25,$36,$64,$00

; ---------------------------------------------------------------
; void __near__ scroll_demo (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scroll_demo: near

	.dbg	func, "scroll_demo", "00", extern, "_scroll_demo"
	.dbg	sym, "x", "00", auto, -2
	.dbg	sym, "y", "00", auto, -4
	.dbg	sym, "dy", "00", auto, -6
	.dbg	sym, "str", "00", auto, -38

.segment	"CODE"

;
; int x = 0;   // x scroll position
;
	.dbg	line, "hello.c", 22
	jsr     push0
;
; int y = 0;   // y scroll position
;
	.dbg	line, "hello.c", 23
	jsr     push0
;
; int dy = 1;  // y scroll direction
;
	.dbg	line, "hello.c", 24
	lda     #$01
	jsr     pusha0
;
; memset(str, 0, sizeof(str));
;
	.dbg	line, "hello.c", 28
	ldy     #$20
	jsr     subysp
	lda     #$00
	ldy     #$1F
L0043:	sta     (sp),y
	dey
	bpl     L0043
;
; sprintf(str, "%6x %6d", y, y);
;
	.dbg	line, "hello.c", 32
L000C:	jsr     decsp4
	lda     sp
	ldx     sp+1
	clc
	adc     #$04
	bcc     L0013
	inx
L0013:	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #<(L0012)
	ldy     #$00
	sta     (sp),y
	iny
	lda     #>(L0012)
	sta     (sp),y
	ldy     #$29
	jsr     pushwysp
	ldy     #$2B
	jsr     pushwysp
	ldy     #$08
	jsr     _sprintf
;
; vrambuf_put(NTADR_A(2,y%30), str, 32);
;
	.dbg	line, "hello.c", 35
	jsr     decsp4
	ldy     #$29
	jsr     pushwysp
	ldx     #$00
	lda     #$1E
	jsr     tosmoda0
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ora     #$02
	pha
	lda     tmp1
	ora     #$20
	tax
	pla
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     sp
	ldx     sp+1
	clc
	adc     #$04
	bcc     L001F
	inx
L001F:	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$20
	jsr     _vrambuf_put
;
; y += dy;
;
	.dbg	line, "hello.c", 37
	ldy     #$20
	lda     (sp),y
	ldy     #$22
	clc
	adc     (sp),y
	sta     (sp),y
	dey
	lda     (sp),y
	ldy     #$23
	adc     (sp),y
	sta     (sp),y
;
; if (y >= 479) dy = -1;
;
	.dbg	line, "hello.c", 39
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cmp     #$DF
	txa
	sbc     #$01
	bvs     L0025
	eor     #$80
L0025:	bpl     L0023
	ldy     #$20
	lda     #$FF
	sta     (sp),y
	iny
	sta     (sp),y
;
; if (y == 0) dy = 1;
;
	.dbg	line, "hello.c", 40
L0023:	ldy     #$22
	lda     (sp),y
	iny
	ora     (sp),y
	bne     L0028
	ldy     #$20
	lda     #$01
	sta     (sp),y
	lda     #$00
	iny
	sta     (sp),y
;
; scroll(x, y);
;
	.dbg	line, "hello.c", 42
L0028:	ldy     #$27
	jsr     pushwysp
	ldy     #$25
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _scroll
;
; while (1) {
;
	.dbg	line, "hello.c", 30
	jmp     L000C
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"

.segment	"CODE"

;
; pal_col(0,0x02); // set screen to dark blue
;
	.dbg	line, "hello.c", 49
	lda     #$00
	jsr     pusha
	lda     #$02
	jsr     _pal_col
;
; pal_col(1,0x14); // pink
;
	.dbg	line, "hello.c", 50
	lda     #$01
	jsr     pusha
	lda     #$14
	jsr     _pal_col
;
; pal_col(2,0x20); // grey
;
	.dbg	line, "hello.c", 51
	lda     #$02
	jsr     pusha
	lda     #$20
	jsr     _pal_col
;
; pal_col(3,0x30); // white
;
	.dbg	line, "hello.c", 52
	lda     #$03
	jsr     pusha
	lda     #$30
	jsr     _pal_col
;
; vrambuf_clear();
;
	.dbg	line, "hello.c", 55
	jsr     _vrambuf_clear
;
; set_vram_update(updbuf);
;
	.dbg	line, "hello.c", 58
	ldx     #$01
	lda     #$00
	jsr     _set_vram_update
;
; ppu_on_all();
;
	.dbg	line, "hello.c", 61
	jsr     _ppu_on_all
;
; scroll_demo();
;
	.dbg	line, "hello.c", 64
	jmp     _scroll_demo
	.dbg	line

.endproc

