ca65 V2.18 - N/A
Main file   : vrambuf.s
Current file: vrambuf.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.18 - N/A
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.18 - N/A"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.import		_ppu_wait_frame
000000r 1               	.export		_updptr
000000r 1               	.export		_vrambuf_end
000000r 1               	.export		_vrambuf_clear
000000r 1               	.export		_vrambuf_flush
000000r 1               	.export		_vrambuf_put
000000r 1               	.import		_memcpy
000000r 1               
000000r 1               .segment	"DATA"
000000r 1               
000000r 1               _updptr:
000000r 1  00           	.byte	$00
000001r 1               
000001r 1               ; ---------------------------------------------------------------
000001r 1               ; void __near__ vrambuf_end (void)
000001r 1               ; ---------------------------------------------------------------
000001r 1               
000001r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_vrambuf_end: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               ;
000000r 1               ; VRAMBUF_SET(NT_UPD_EOF);
000000r 1               ;
000000r 1  AC rr rr     	ldy     _updptr
000003r 1  A9 FF        	lda     #$FF
000005r 1  99 00 01     	sta     $0100,y
000008r 1               ;
000008r 1               ; }
000008r 1               ;
000008r 1  60           	rts
000009r 1               
000009r 1               .endproc
000009r 1               
000009r 1               ; ---------------------------------------------------------------
000009r 1               ; void __near__ vrambuf_clear (void)
000009r 1               ; ---------------------------------------------------------------
000009r 1               
000009r 1               .segment	"CODE"
000009r 1               
000009r 1               .proc	_vrambuf_clear: near
000009r 1               
000009r 1               .segment	"CODE"
000009r 1               
000009r 1               ;
000009r 1               ; updptr = 0;
000009r 1               ;
000009r 1  A9 00        	lda     #$00
00000Br 1  8D rr rr     	sta     _updptr
00000Er 1               ;
00000Er 1               ; vrambuf_end();
00000Er 1               ;
00000Er 1  4C rr rr     	jmp     _vrambuf_end
000011r 1               
000011r 1               .endproc
000011r 1               
000011r 1               ; ---------------------------------------------------------------
000011r 1               ; void __near__ vrambuf_flush (void)
000011r 1               ; ---------------------------------------------------------------
000011r 1               
000011r 1               .segment	"CODE"
000011r 1               
000011r 1               .proc	_vrambuf_flush: near
000011r 1               
000011r 1               .segment	"CODE"
000011r 1               
000011r 1               ;
000011r 1               ; vrambuf_end();
000011r 1               ;
000011r 1  20 rr rr     	jsr     _vrambuf_end
000014r 1               ;
000014r 1               ; ppu_wait_frame();
000014r 1               ;
000014r 1  20 rr rr     	jsr     _ppu_wait_frame
000017r 1               ;
000017r 1               ; vrambuf_clear();
000017r 1               ;
000017r 1  4C rr rr     	jmp     _vrambuf_clear
00001Ar 1               
00001Ar 1               .endproc
00001Ar 1               
00001Ar 1               ; ---------------------------------------------------------------
00001Ar 1               ; void __near__ vrambuf_put (unsigned short, __near__ const unsigned char *, unsigned char)
00001Ar 1               ; ---------------------------------------------------------------
00001Ar 1               
00001Ar 1               .segment	"CODE"
00001Ar 1               
00001Ar 1               .proc	_vrambuf_put: near
00001Ar 1               
00001Ar 1               .segment	"CODE"
00001Ar 1               
00001Ar 1               ;
00001Ar 1               ; void vrambuf_put(word addr, register const char* str, byte len) {
00001Ar 1               ;
00001Ar 1  20 rr rr     	jsr     pusha
00001Dr 1               ;
00001Dr 1               ; if (VBUFSIZE-4-len < updptr) {
00001Dr 1               ;
00001Dr 1  A9 7C        	lda     #$7C
00001Fr 1  38           	sec
000020r 1  A0 00        	ldy     #$00
000022r 1  F1 rr        	sbc     (sp),y
000024r 1  CD rr rr     	cmp     _updptr
000027r 1  B0 03        	bcs     L0013
000029r 1               ;
000029r 1               ; vrambuf_flush();
000029r 1               ;
000029r 1  20 rr rr     	jsr     _vrambuf_flush
00002Cr 1               ;
00002Cr 1               ; VRAMBUF_ADD((addr >> 8) ^ NT_UPD_HORZ);
00002Cr 1               ;
00002Cr 1  A2 01        L0013:	ldx     #$01
00002Er 1  A9 00        	lda     #$00
000030r 1  18           	clc
000031r 1  6D rr rr     	adc     _updptr
000034r 1  90 01        	bcc     L0019
000036r 1  E8           	inx
000037r 1  85 rr        L0019:	sta     ptr1
000039r 1  86 rr        	stx     ptr1+1
00003Br 1  A0 04        	ldy     #$04
00003Dr 1  B1 rr        	lda     (sp),y
00003Fr 1  49 40        	eor     #$40
000041r 1  A0 00        	ldy     #$00
000043r 1  91 rr        	sta     (ptr1),y
000045r 1  EE rr rr     	inc     _updptr
000048r 1               ;
000048r 1               ; VRAMBUF_ADD(addr); // only lower 8 bits
000048r 1               ;
000048r 1  A0 03        	ldy     #$03
00004Ar 1  B1 rr        	lda     (sp),y
00004Cr 1  AC rr rr     	ldy     _updptr
00004Fr 1  99 00 01     	sta     $0100,y
000052r 1  EE rr rr     	inc     _updptr
000055r 1               ;
000055r 1               ; VRAMBUF_ADD(len);
000055r 1               ;
000055r 1  A0 00        	ldy     #$00
000057r 1  B1 rr        	lda     (sp),y
000059r 1  AC rr rr     	ldy     _updptr
00005Cr 1  99 00 01     	sta     $0100,y
00005Fr 1  EE rr rr     	inc     _updptr
000062r 1               ;
000062r 1               ; memcpy(updbuf+updptr, str, len);
000062r 1               ;
000062r 1  AD rr rr     	lda     _updptr
000065r 1  A2 01        	ldx     #$01
000067r 1  20 rr rr     	jsr     pushax
00006Ar 1  A0 06        	ldy     #$06
00006Cr 1  20 rr rr     	jsr     pushwysp
00006Fr 1  A0 04        	ldy     #$04
000071r 1  B1 rr        	lda     (sp),y
000073r 1  A2 00        	ldx     #$00
000075r 1  20 rr rr     	jsr     _memcpy
000078r 1               ;
000078r 1               ; updptr += len;
000078r 1               ;
000078r 1  A0 00        	ldy     #$00
00007Ar 1  B1 rr        	lda     (sp),y
00007Cr 1  18           	clc
00007Dr 1  6D rr rr     	adc     _updptr
000080r 1  8D rr rr     	sta     _updptr
000083r 1               ;
000083r 1               ; vrambuf_end();
000083r 1               ;
000083r 1  20 rr rr     	jsr     _vrambuf_end
000086r 1               ;
000086r 1               ; }
000086r 1               ;
000086r 1  4C rr rr     	jmp     incsp5
000089r 1               
000089r 1               .endproc
000089r 1               
000089r 1               
