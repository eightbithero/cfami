ca65 V2.18 - N/A
Main file   : hello.s
Current file: hello.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.18 - N/A
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.18 - N/A"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	on
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.dbg		file, "hello.c", 1613, 1704640239
000000r 1               	.dbg		file, "neslib.h", 11310, 1704639340
000000r 1               	.dbg		file, "/opt/homebrew/Cellar/cc65/2.19/share/cc65/include/string.h", 5104, 1590865395
000000r 1               	.dbg		file, "/opt/homebrew/Cellar/cc65/2.19/share/cc65/include/stddef.h", 3057, 1590865395
000000r 1               	.dbg		file, "/opt/homebrew/Cellar/cc65/2.19/share/cc65/include/stdio.h", 6189, 1590865395
000000r 1               	.dbg		file, "/opt/homebrew/Cellar/cc65/2.19/share/cc65/include/stdarg.h", 2913, 1590865395
000000r 1               	.dbg		file, "vrambuf.h", 1036, 1704629370
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.dbg		sym, "pal_col", "00", extern, "_pal_col"
000000r 1               	.dbg		sym, "ppu_on_all", "00", extern, "_ppu_on_all"
000000r 1               	.dbg		sym, "scroll", "00", extern, "_scroll"
000000r 1               	.dbg		sym, "set_vram_update", "00", extern, "_set_vram_update"
000000r 1               	.dbg		sym, "memset", "00", extern, "_memset"
000000r 1               	.dbg		sym, "sprintf", "00", extern, "_sprintf"
000000r 1               	.dbg		sym, "vrambuf_clear", "00", extern, "_vrambuf_clear"
000000r 1               	.dbg		sym, "vrambuf_put", "00", extern, "_vrambuf_put"
000000r 1               	.import		_pal_col
000000r 1               	.import		_ppu_on_all
000000r 1               	.import		_scroll
000000r 1               	.import		_set_vram_update
000000r 1               	.import		_memset
000000r 1               	.import		_sprintf
000000r 1               	.import		_vrambuf_clear
000000r 1               	.import		_vrambuf_put
000000r 1               	.export		_scroll_demo
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"RODATA"
000000r 1               
000000r 1               L0012:
000000r 1  25 36 78 20  	.byte	$25,$36,$78,$20,$25,$36,$64,$00
000004r 1  25 36 64 00  
000008r 1               
000008r 1               ; ---------------------------------------------------------------
000008r 1               ; void __near__ scroll_demo (void)
000008r 1               ; ---------------------------------------------------------------
000008r 1               
000008r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_scroll_demo: near
000000r 1               
000000r 1               	.dbg	func, "scroll_demo", "00", extern, "_scroll_demo"
000000r 1               	.dbg	sym, "x", "00", auto, -2
000000r 1               	.dbg	sym, "y", "00", auto, -4
000000r 1               	.dbg	sym, "dy", "00", auto, -6
000000r 1               	.dbg	sym, "str", "00", auto, -38
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               ;
000000r 1               ; int x = 0;   // x scroll position
000000r 1               ;
000000r 1               	.dbg	line, "hello.c", 22
000000r 1  20 rr rr     	jsr     push0
000003r 1               ;
000003r 1               ; int y = 0;   // y scroll position
000003r 1               ;
000003r 1               	.dbg	line, "hello.c", 23
000003r 1  20 rr rr     	jsr     push0
000006r 1               ;
000006r 1               ; int dy = 1;  // y scroll direction
000006r 1               ;
000006r 1               	.dbg	line, "hello.c", 24
000006r 1  A9 01        	lda     #$01
000008r 1  20 rr rr     	jsr     pusha0
00000Br 1               ;
00000Br 1               ; memset(str, 0, sizeof(str));
00000Br 1               ;
00000Br 1               	.dbg	line, "hello.c", 28
00000Br 1  A0 20        	ldy     #$20
00000Dr 1  20 rr rr     	jsr     subysp
000010r 1  A9 00        	lda     #$00
000012r 1  A0 1F        	ldy     #$1F
000014r 1  91 rr        L0043:	sta     (sp),y
000016r 1  88           	dey
000017r 1  10 FB        	bpl     L0043
000019r 1               ;
000019r 1               ; sprintf(str, "%6x %6d", y, y);
000019r 1               ;
000019r 1               	.dbg	line, "hello.c", 32
000019r 1  20 rr rr     L000C:	jsr     decsp4
00001Cr 1  A5 rr        	lda     sp
00001Er 1  A6 rr        	ldx     sp+1
000020r 1  18           	clc
000021r 1  69 04        	adc     #$04
000023r 1  90 01        	bcc     L0013
000025r 1  E8           	inx
000026r 1  A0 02        L0013:	ldy     #$02
000028r 1  91 rr        	sta     (sp),y
00002Ar 1  C8           	iny
00002Br 1  8A           	txa
00002Cr 1  91 rr        	sta     (sp),y
00002Er 1  A9 rr        	lda     #<(L0012)
000030r 1  A0 00        	ldy     #$00
000032r 1  91 rr        	sta     (sp),y
000034r 1  C8           	iny
000035r 1  A9 rr        	lda     #>(L0012)
000037r 1  91 rr        	sta     (sp),y
000039r 1  A0 29        	ldy     #$29
00003Br 1  20 rr rr     	jsr     pushwysp
00003Er 1  A0 2B        	ldy     #$2B
000040r 1  20 rr rr     	jsr     pushwysp
000043r 1  A0 08        	ldy     #$08
000045r 1  20 rr rr     	jsr     _sprintf
000048r 1               ;
000048r 1               ; vrambuf_put(NTADR_A(2,y%30), str, 32);
000048r 1               ;
000048r 1               	.dbg	line, "hello.c", 35
000048r 1  20 rr rr     	jsr     decsp4
00004Br 1  A0 29        	ldy     #$29
00004Dr 1  20 rr rr     	jsr     pushwysp
000050r 1  A2 00        	ldx     #$00
000052r 1  A9 1E        	lda     #$1E
000054r 1  20 rr rr     	jsr     tosmoda0
000057r 1  20 rr rr     	jsr     aslax4
00005Ar 1  86 rr        	stx     tmp1
00005Cr 1  0A           	asl     a
00005Dr 1  26 rr        	rol     tmp1
00005Fr 1  09 02        	ora     #$02
000061r 1  48           	pha
000062r 1  A5 rr        	lda     tmp1
000064r 1  09 20        	ora     #$20
000066r 1  AA           	tax
000067r 1  68           	pla
000068r 1  A0 02        	ldy     #$02
00006Ar 1  91 rr        	sta     (sp),y
00006Cr 1  C8           	iny
00006Dr 1  8A           	txa
00006Er 1  91 rr        	sta     (sp),y
000070r 1  A5 rr        	lda     sp
000072r 1  A6 rr        	ldx     sp+1
000074r 1  18           	clc
000075r 1  69 04        	adc     #$04
000077r 1  90 01        	bcc     L001F
000079r 1  E8           	inx
00007Ar 1  A0 00        L001F:	ldy     #$00
00007Cr 1  91 rr        	sta     (sp),y
00007Er 1  C8           	iny
00007Fr 1  8A           	txa
000080r 1  91 rr        	sta     (sp),y
000082r 1  A9 20        	lda     #$20
000084r 1  20 rr rr     	jsr     _vrambuf_put
000087r 1               ;
000087r 1               ; y += dy;
000087r 1               ;
000087r 1               	.dbg	line, "hello.c", 37
000087r 1  A0 20        	ldy     #$20
000089r 1  B1 rr        	lda     (sp),y
00008Br 1  A0 22        	ldy     #$22
00008Dr 1  18           	clc
00008Er 1  71 rr        	adc     (sp),y
000090r 1  91 rr        	sta     (sp),y
000092r 1  88           	dey
000093r 1  B1 rr        	lda     (sp),y
000095r 1  A0 23        	ldy     #$23
000097r 1  71 rr        	adc     (sp),y
000099r 1  91 rr        	sta     (sp),y
00009Br 1               ;
00009Br 1               ; if (y >= 479) dy = -1;
00009Br 1               ;
00009Br 1               	.dbg	line, "hello.c", 39
00009Br 1  B1 rr        	lda     (sp),y
00009Dr 1  AA           	tax
00009Er 1  88           	dey
00009Fr 1  B1 rr        	lda     (sp),y
0000A1r 1  C9 DF        	cmp     #$DF
0000A3r 1  8A           	txa
0000A4r 1  E9 01        	sbc     #$01
0000A6r 1  70 02        	bvs     L0025
0000A8r 1  49 80        	eor     #$80
0000AAr 1  10 09        L0025:	bpl     L0023
0000ACr 1  A0 20        	ldy     #$20
0000AEr 1  A9 FF        	lda     #$FF
0000B0r 1  91 rr        	sta     (sp),y
0000B2r 1  C8           	iny
0000B3r 1  91 rr        	sta     (sp),y
0000B5r 1               ;
0000B5r 1               ; if (y == 0) dy = 1;
0000B5r 1               ;
0000B5r 1               	.dbg	line, "hello.c", 40
0000B5r 1  A0 22        L0023:	ldy     #$22
0000B7r 1  B1 rr        	lda     (sp),y
0000B9r 1  C8           	iny
0000BAr 1  11 rr        	ora     (sp),y
0000BCr 1  D0 0B        	bne     L0028
0000BEr 1  A0 20        	ldy     #$20
0000C0r 1  A9 01        	lda     #$01
0000C2r 1  91 rr        	sta     (sp),y
0000C4r 1  A9 00        	lda     #$00
0000C6r 1  C8           	iny
0000C7r 1  91 rr        	sta     (sp),y
0000C9r 1               ;
0000C9r 1               ; scroll(x, y);
0000C9r 1               ;
0000C9r 1               	.dbg	line, "hello.c", 42
0000C9r 1  A0 27        L0028:	ldy     #$27
0000CBr 1  20 rr rr     	jsr     pushwysp
0000CEr 1  A0 25        	ldy     #$25
0000D0r 1  B1 rr        	lda     (sp),y
0000D2r 1  AA           	tax
0000D3r 1  88           	dey
0000D4r 1  B1 rr        	lda     (sp),y
0000D6r 1  20 rr rr     	jsr     _scroll
0000D9r 1               ;
0000D9r 1               ; while (1) {
0000D9r 1               ;
0000D9r 1               	.dbg	line, "hello.c", 30
0000D9r 1  4C rr rr     	jmp     L000C
0000DCr 1               	.dbg	line
0000DCr 1               
0000DCr 1               .endproc
0000DCr 1               
0000DCr 1               ; ---------------------------------------------------------------
0000DCr 1               ; void __near__ main (void)
0000DCr 1               ; ---------------------------------------------------------------
0000DCr 1               
0000DCr 1               .segment	"CODE"
0000DCr 1               
0000DCr 1               .proc	_main: near
0000DCr 1               
0000DCr 1               	.dbg	func, "main", "00", extern, "_main"
0000DCr 1               
0000DCr 1               .segment	"CODE"
0000DCr 1               
0000DCr 1               ;
0000DCr 1               ; pal_col(0,0x02); // set screen to dark blue
0000DCr 1               ;
0000DCr 1               	.dbg	line, "hello.c", 49
0000DCr 1  A9 00        	lda     #$00
0000DEr 1  20 rr rr     	jsr     pusha
0000E1r 1  A9 02        	lda     #$02
0000E3r 1  20 rr rr     	jsr     _pal_col
0000E6r 1               ;
0000E6r 1               ; pal_col(1,0x14); // pink
0000E6r 1               ;
0000E6r 1               	.dbg	line, "hello.c", 50
0000E6r 1  A9 01        	lda     #$01
0000E8r 1  20 rr rr     	jsr     pusha
0000EBr 1  A9 14        	lda     #$14
0000EDr 1  20 rr rr     	jsr     _pal_col
0000F0r 1               ;
0000F0r 1               ; pal_col(2,0x20); // grey
0000F0r 1               ;
0000F0r 1               	.dbg	line, "hello.c", 51
0000F0r 1  A9 02        	lda     #$02
0000F2r 1  20 rr rr     	jsr     pusha
0000F5r 1  A9 20        	lda     #$20
0000F7r 1  20 rr rr     	jsr     _pal_col
0000FAr 1               ;
0000FAr 1               ; pal_col(3,0x30); // white
0000FAr 1               ;
0000FAr 1               	.dbg	line, "hello.c", 52
0000FAr 1  A9 03        	lda     #$03
0000FCr 1  20 rr rr     	jsr     pusha
0000FFr 1  A9 30        	lda     #$30
000101r 1  20 rr rr     	jsr     _pal_col
000104r 1               ;
000104r 1               ; vrambuf_clear();
000104r 1               ;
000104r 1               	.dbg	line, "hello.c", 55
000104r 1  20 rr rr     	jsr     _vrambuf_clear
000107r 1               ;
000107r 1               ; set_vram_update(updbuf);
000107r 1               ;
000107r 1               	.dbg	line, "hello.c", 58
000107r 1  A2 01        	ldx     #$01
000109r 1  A9 00        	lda     #$00
00010Br 1  20 rr rr     	jsr     _set_vram_update
00010Er 1               ;
00010Er 1               ; ppu_on_all();
00010Er 1               ;
00010Er 1               	.dbg	line, "hello.c", 61
00010Er 1  20 rr rr     	jsr     _ppu_on_all
000111r 1               ;
000111r 1               ; scroll_demo();
000111r 1               ;
000111r 1               	.dbg	line, "hello.c", 64
000111r 1  4C rr rr     	jmp     _scroll_demo
000114r 1               	.dbg	line
000114r 1               
000114r 1               .endproc
000114r 1               
000114r 1               
